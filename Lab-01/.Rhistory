geom_bar(position = "dodge") +
labs(title = "So sánh kết quả dự đoán và giá trị thực (Kernel Tuyến tính)",
x = "Loài thực tế",
y = "Số lượng mẫu",
fill = "Loài dự đoán") +
theme_minimal() +
theme(legend.position = "bottom",
ggplot(results_df, aes(x = Actual, fill = Linear_Pred)) +
geom_bar(position = "dodge") +
labs(title = "So sánh kết quả dự đoán và giá trị thực (Kernel Tuyến tính)",
x = "Loài thực tế",
y = "Số lượng mẫu",
fill = "Loài dự đoán") +
theme_minimal() +
theme(legend.position = "bottom",
**K-Means** là một trong những thuật toán phân cụm (clustering) phổ biến nhất trong học máy không giám sát (unsupervised learning). Thuật toán này nhằm mục đích phân chia một tập dữ liệu thành K cụm (clusters) khác nhau, trong đó mỗi điểm dữ liệu thuộc về cụm có trung tâm (centroid) gần nhất.
!["img1](https://prateekvjoshi.com/wp-content/uploads/2013/06/main.jpg?w=540)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Đặt locale để hỗ trợ tiếng Việt trong đồ thị
Sys.setlocale("LC_ALL", "Vietnamese")
library(cluster)  # Cho phân tích cụm
library(factoextra)  # Cho trực quan hóa phân cụm
library(NbClust)  # Cho việc xác định số cụm tối ưu
library(fpc)  # Cho metrics đánh giá cụm
# Tạo dữ liệu mẫu
set.seed(123)
# Tạo 3 cụm dữ liệu
cluster1 <- data.frame(
x = rnorm(50, 0, 1),
y = rnorm(50, 0, 1)
)
cluster2 <- data.frame(
x = rnorm(50, 5, 1),
y = rnorm(50, 5, 1)
)
cluster3 <- data.frame(
x = rnorm(50, 10, 1),
y = rnorm(50, 0, 1)
)
# Gộp dữ liệu
synthetic_data <- rbind(cluster1, cluster2, cluster3)
wcss <- numeric(10)
for(i in 1:10) {
kmeans_model <- kmeans(synthetic_data, centers=i, nstart=25)
wcss[i]  <- kmeans_model$tot.withinss
}
wcss <- numeric(10)
for(i in 1:10) {
kmeans_model <- kmeans(synthetic_data, centers=i, nstart=25)
wcss[i]  <- kmeans_model$tot.withinss
}
# Vẽ biểu đồ Elbow
plot(1:10, wcss, type = "b", pch = 19,
xlab = "So luong cum (K)",
ylab = "Tong binh phuong khoang cach trong cum (WCSS)",
main = "Phuong phap Elbow")
avg_sil <- numeric(9)
for(k in 2:10) {
km <- kmeans(synthetic_data, centers = k, nstart = 25)
ss <- silhouette(km$cluster, dist(synthetic_data))
avg_sil[k-1] <- mean(ss[, 3])
}
# Vẽ biểu đồ Silhouette
plot(2:10, avg_sil, type = "b", pch = 19,
xlab = "So luong cum (K)",
ylab = "Diem Silhouette trung binh",
main = "Phuong phap Silhouette")
# Tính Gap Statistic (có thể mất thời gian)
set.seed(123)
gap_stat <- clusGap(synthetic_data, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Vẽ biểu đồ Gap Statistic
plot(gap_stat, main = "Phuong phap Gap Statistic")
# Sử dụng NbClust để đánh giá nhiều phương pháp
# Chú ý: Kết quả này có thể mất thời gian để tính toán
nb <- NbClust(synthetic_data, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
# Hiển thị biểu đồ tần suất của các K được đề xuất
barplot(table(nb$Best.n[1,]),
xlab = "So luong cum",
ylab = "So phuong phap de xuat",
main = "So luong cum duoc de xuat boi 30 chi so")
# Sử dụng NbClust để đánh giá nhiều phương pháp
# Chú ý: Kết quả này có thể mất thời gian để tính toán
nb <- NbClust(synthetic_data, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
# Áp dụng K-Means với K = 3
km_result <- kmeans(synthetic_data, centers = 3, nstart = 25)
# Tính và vẽ biểu đồ Silhouette
sil <- silhouette(km_result$cluster, dist(synthetic_data))
fviz_silhouette(sil, print.summary = TRUE)
sil
fviz_silhouette(sil, print.summary = TRUE)
# Tính Dunn Index
library(clValid)
dunn_index <- dunn(distance = dist(synthetic_data), km_result$cluster)
cat("Dunn Index:", dunn_index, "\n")
# Trực quan hóa kết quả phân cụm
fviz_cluster(km_result, data = synthetic_data,
palette = c("#1B9E77", "#D95F02", "#7570B3"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_minimal(),
main = "Ket qua phan cum K-Means (K=3)")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Đặt locale để hỗ trợ tiếng Việt trong đồ thị
Sys.setlocale("LC_ALL", "Vietnamese")
# Tạo dữ liệu mẫu cho minh họa DBSCAN
set.seed(123)
# Tạo cụm hình tròn
n1 <- 100
t <- runif(n1, 0, 2*pi)
r <- runif(n1, 0, 0.8)
x1 <- r * cos(t)
y1 <- r * sin(t)
# Tạo cụm hình bán nguyệt
n2 <- 100
t <- runif(n2, -pi/2, pi/2)
r <- runif(n2, 1.5, 2)
x2 <- r * cos(t)
y2 <- r * sin(t)
# Tạo cụm hình tam giác
n3 <- 80
x3 <- runif(n3, -3, -1)
y3 <- runif(n3, -1, 1)
# Thêm một số điểm nhiễu
n4 <- 20
x4 <- runif(n4, -3, 3)
y4 <- runif(n4, -3, 3)
# Kết hợp dữ liệu
x <- c(x1, x2, x3, x4)
y <- c(y1, y2, y3, y4)
true_labels <- c(rep(1, n1), rep(2, n2), rep(3, n3), rep(0, n4))
data <- data.frame(x = x, y = y, label = factor(true_labels))
# Áp dụng DBSCAN
library(dbscan)
db_result <- dbscan(data[, 1:2], eps = 0.3, minPts = 5)
data$cluster <- factor(db_result$cluster)
# Vẽ kết quả DBSCAN với ggplot2
library(ggplot2)
ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(size = 2, alpha = 0.7) +
scale_color_manual(values = c("0" = "gray", "1" = "red", "2" = "blue", "3" = "green")) +
theme_minimal() +
labs(title = "Minh họa phân cụm với DBSCAN",
subtitle = "Nhận diện được cụm hình dạng tùy ý và phát hiện nhiễu",
x = "X", y = "Y",
color = "Cụm") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"))
# Vẽ kết quả DBSCAN với ggplot2
library(ggplot2)
ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(size = 2, alpha = 0.7) +
scale_color_manual(values = c("0" = "gray", "1" = "red", "2" = "blue", "3" = "green")) +
theme_minimal() +
labs(title = "Minh họa phân cụm với DBSCAN",
subtitle = "Nhận diện được cụm hình dạng tùy ý và phát hiện nhiễu",
x = "X", y = "Y",
color = "Cụm") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"))
# Tạo dữ liệu mẫu cho minh họa DBSCAN
set.seed(123)
# Tạo cụm hình tròn
n1 <- 100
t <- runif(n1, 0, 2*pi)
r <- runif(n1, 0, 0.8)
x1 <- r * cos(t)
y1 <- r * sin(t)
# Tạo cụm hình bán nguyệt
n2 <- 100
t <- runif(n2, -pi/2, pi/2)
r <- runif(n2, 1.5, 2)
x2 <- r * cos(t)
y2 <- r * sin(t)
# Tạo cụm hình tam giác
n3 <- 80
x3 <- runif(n3, -3, -1)
y3 <- runif(n3, -1, 1)
# Thêm một số điểm nhiễu
n4 <- 20
x4 <- runif(n4, -3, 3)
y4 <- runif(n4, -3, 3)
# Kết hợp dữ liệu
x <- c(x1, x2, x3, x4)
y <- c(y1, y2, y3, y4)
true_labels <- c(rep(1, n1), rep(2, n2), rep(3, n3), rep(0, n4))
data <- data.frame(x = x, y = y, label = factor(true_labels))
# Áp dụng DBSCAN
library(dbscan)
db_result <- dbscan(data[, 1:2], eps = 0.3, minPts = 5)
db_result <- dbscan(data[, 1:2], eps = 0.3, minPts = 5)
# Áp dụng DBSCAN
library(dbscan)
db_result <- dbscan(data[, 1:2], eps = 0.3, minpts = 5)
data
data
data <- data.frame(x = x, y = y, label = factor(true_labels))
# Áp dụng DBSCAN
library(dbscan)
db_result <- dbscan(data[, 1:2], eps = 0.3, minpts = 5)
db_result <- dbscan(data[, 1:2], 0.3, 5)
db_result <- dbscan(data[, 1:2], 0.3, 5)
data$cluster <- factor(db_result$cluster)
db_result <- dbscan(data[, 1:2], eps = 0.3, min_pts = 5)
db_result <- dbscan(data[, 1:2], eps = 0.3, MinPts  = 5)
data$cluster <- factor(db_result$cluster)
# Vẽ kết quả DBSCAN với ggplot2
library(ggplot2)
ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(size = 2, alpha = 0.7) +
scale_color_manual(values = c("0" = "gray", "1" = "red", "2" = "blue", "3" = "green")) +
theme_minimal() +
labs(title = "Minh họa phân cụm với DBSCAN",
subtitle = "Nhận diện được cụm hình dạng tùy ý và phát hiện nhiễu",
x = "X", y = "Y",
color = "Cụm") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"))
# Tạo dữ liệu mẫu cho DBSCAN
set.seed(123)
# Tạo một cụm hình tròn
n1 <- 100
t <- runif(n1, 0, 2*pi)
r <- runif(n1, 0, 0.8)
x1 <- r * cos(t)
y1 <- r * sin(t)
# Tạo một cụm hình bán nguyệt
n2 <- 100
t <- runif(n2, -pi/2, pi/2)
r <- runif(n2, 1.5, 2)
x2 <- r * cos(t)
y2 <- r * sin(t)
# Thêm một số điểm nhiễu
n3 <- 20
x3 <- runif(n3, -2.5, 2.5)
y3 <- runif(n3, -2.5, 2.5)
# Kết hợp dữ liệu
x <- c(x1, x2, x3)
y <- c(y1, y2, y3)
data <- data.frame(x = x, y = y)
# Vẽ dữ liệu mẫu
plot(data$x, data$y, pch=20, cex=0.8,
xlab="X", ylab="Y", main="Minh hoa DBSCAN",
col="black", xlim=c(-3,3), ylim=c(-3,3))
# Vẽ vùng epsilon cho một số điểm minh họa
eps <- 0.5
points(x[25], y[25], pch=20, col="red", cex=1.2)  # Điểm lõi
# Vẽ dữ liệu mẫu
plot(data$x, data$y, pch=20, cex=0.8,
xlab="X", ylab="Y", main="Minh hoa DBSCAN",
col="black", xlim=c(-3,3), ylim=c(-3,3))
# Vẽ vùng epsilon cho một số điểm minh họa
eps <- 0.5
points(x[25], y[25], pch=20, col="red", cex=1.2)  # Điểm lõi
points(x[25], y[25], pch=20, col="red", cex=1.2)  # Điểm lõi
eps <- 0.5
points(x[25], y[25], pch=20, col="red", cex=1.2)  # Điểm lõi
# Vẽ dữ liệu mẫu
plot(data$x, data$y, pch=20, cex=0.8,
xlab="X", ylab="Y", main="Minh hoa DBSCAN",
col="black", xlim=c(-3,3), ylim=c(-3,3))
# Vẽ vùng epsilon cho một số điểm minh họa
eps <- 0.5
points(x[25], y[25], pch=20, col="red", cex=1.2)  # Điểm lõi
draw_circle <- function(x, y, radius) {
angles <- seq(0, 2*pi, length.out=100)
xx <- x + radius * cos(angles)
yy <- y + radius * sin(angles)
lines(xx, yy, col="red", lty=2)
}
draw_circle(x[25], y[25], eps)
points(x[150], y[150], pch=20, col="blue", cex=1.2)  # Điểm biên
draw_circle(x[150], y[150], eps)
points(x[210], y[210], pch=20, col="darkgray", cex=1.2)  # Điểm nhiễu
draw_circle(x[210], y[210], eps)
legend("topright",
legend=c("Điểm dữ liệu", "Điểm lõi", "Điểm biên", "Điểm nhiễu", "Vùng ε"),
col=c("black", "red", "blue", "darkgray", "red"),
pch=c(20, 20, 20, 20, NA),
lty=c(NA, NA, NA, NA, 2),
cex=0.8)
# Cài đặt và nạp các gói cần thiết
library(dbscan)  # Cho thuật toán DBSCAN
library(factoextra)  # Cho trực quan hóa
library(fpc)  # Cho đánh giá phân cụm
library(ggplot2)  # Cho vẽ biểu đồ
# Tạo dữ liệu mẫu cho DBSCAN
set.seed(123)
# Tạo một cụm hình tròn
n1 <- 100
t <- runif(n1, 0, 2*pi)
r <- runif(n1, 0, 0.8)
x1 <- r * cos(t)
y1 <- r * sin(t)
# Tạo một cụm hình bán nguyệt
n2 <- 100
r <- runif(n2, 1.5, 2)
x2 <- r * cos(t)
x2 <- r * cos(t)
y2 <- r * sin(t)
# Thêm một số điểm nhiễu
n3 <- 20
x3 <- runif(n3, -2.5, 2.5)
y3 <- runif(n3, -2.5, 2.5)
# Kết hợp dữ liệu
x <- c(x1, x2, x3)
y <- c(y1, y2, y3)
synthetic_data <- data.frame(x = x, y = y)
# Tính k-distance graph với k = 4 (MinPts = 5)
k <- 4
kNNdist <- kNNdistplot(synthetic_data, k = k)
# Xác định epsilon từ k-distance graph
eps_candidates <- sort(kNNdist$dist)
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
# Xác định epsilon từ k-distance graph
eps_candidates <- sort(kNNdist$dist)
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
# Xác định epsilon từ k-distance graph
eps_candidates <- sort(kNNdist$dist)
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
eps_candidates <- sort(kNNdist$dist)
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
eps_candidates
# Xác định epsilon từ k-distance graph
eps_candidates <- sort(kNNdist$dist)
eps_candidates
kNNdist <- kNNdistplot(synthetic_data, k = k)
kNNdist
# Cài đặt và nạp các gói cần thiết
library(dbscan)  # Cho thuật toán DBSCAN
library(factoextra)  # Cho trực quan hóa
library(fpc)  # Cho đánh giá phân cụm
library(ggplot2)  # Cho vẽ biểu đồ
# Tạo dữ liệu mẫu cho DBSCAN
set.seed(123)
# Tạo một cụm hình tròn
n1 <- 100
t <- runif(n1, 0, 2*pi)
r <- runif(n1, 0, 0.8)
x1 <- r * cos(t)
y1 <- r * sin(t)
# Tạo một cụm hình bán nguyệt
n2 <- 100
t <- runif(n2, -pi/2, pi/2)
r <- runif(n2, 1.5, 2)
x2 <- r * cos(t)
y2 <- r * sin(t)
# Thêm một số điểm nhiễu
n3 <- 20
x3 <- runif(n3, -2.5, 2.5)
y3 <- runif(n3, -2.5, 2.5)
# Kết hợp dữ liệu
x <- c(x1, x2, x3)
y <- c(y1, y2, y3)
synthetic_data <- data.frame(x = x, y = y)
# Tính k-distance graph với k = 4 (MinPts = 5)
k <- 4
kNNdist <- kNNdistplot(synthetic_data, k = k)
kNNdist
kNNdist <- kNNdistplot(synthetic_data, k = k)
kNNdist
kNNdist <- kNNdist(synthetic_data, k = k)
kNNdist
# Xác định epsilon từ k-distance graph
eps_candidates <- sort(kNNdist$dist)
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
# Sắp xếp khoảng cách và vẽ đồ thị
eps_candidates <- sort(knn_dists)
# Tính khoảng cách k-nearest neighbors
k <- 4
knn_dists <- kNNdist(synthetic_data, k = k)
# Sắp xếp khoảng cách và vẽ đồ thị
eps_candidates <- sort(knn_dists)
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
# Tìm điểm gẩy (có thể bằng thuật toán hoặc quan sát)
# Ví dụ đơn giản: tìm điểm có độ cong lớn
eps_diff <- diff(eps_candidates, differences = 2)
eps_index <- which.max(eps_diff)
eps_value <- eps_candidates[eps_index]
# Đánh dấu điểm gẩy
points(eps_index, eps_candidates[eps_index], col = "red", pch = 19)
text(eps_index, eps_candidates[eps_index],
labels = paste("ε ≈", round(eps_candidates[eps_index], 2)),
pos = 4, col = "red")
# Vẽ đường thẳng tại điểm gẩy
abline(h = eps_candidates[eps_index], col = "red", lty = 2)
knn_dists <- kNNdist(synthetic_data, k = k)
# Sắp xếp khoảng cách và vẽ đồ thị
eps_candidates <- sort(knn_dists)
plot(eps_candidates, type = "l",
xlab = "Điểm dữ liệu (đã sắp xếp)",
ylab = paste("Khoảng cách đến điểm thứ", k, "gần nhất"),
main = "Phương pháp k-distance")
# Tìm điểm gẩy (có thể bằng thuật toán hoặc quan sát)
# Ví dụ đơn giản: tìm điểm có độ cong lớn
eps_diff <- diff(eps_candidates, differences = 2)
eps_index <- which.max(eps_diff)
eps_value <- eps_candidates[eps_index]
# Đánh dấu điểm gẩy
points(eps_index, eps_candidates[eps_index], col = "red", pch = 19)
text(eps_index, eps_candidates[eps_index],
labels = paste("ε ≈", round(eps_candidates[eps_index], 2)),
pos = 4, col = "red")
# Vẽ đường thẳng tại điểm gẩy
abline(h = eps_candidates[eps_index], col = "red", lty = 2)
# Tạo lưới các tham số
eps_values <- c(0.2, 0.5, 0.8)
minPts_values <- c(3, 5)
# Tạo lưới plot
par(mfrow = c(length(minPts_values), length(eps_values)))
par(mar = c(4, 4, 2, 1))
# Áp dụng DBSCAN với các tham số khác nhau
for (minPts in minPts_values) {
for (eps in eps_values) {
# Áp dụng DBSCAN
db <- dbscan(synthetic_data, eps = eps, minPts = minPts)
# Vẽ kết quả
plot(synthetic_data, col = db$cluster + 1, pch = 20, cex = 0.8,
main = paste("ε =", eps, ", MinPts =", minPts),
xlab = "X", ylab = "Y")
# Hiển thị số lượng cụm và điểm nhiễu
n_clusters <- max(db$cluster)
n_noise <- sum(db$cluster == 0)
legend("topright",
legend = c(paste("Cụm:", n_clusters),
paste("Nhiễu:", n_noise)),
cex = 0.7, bty = "n")
}
}
# Áp dụng DBSCAN với tham số phù hợp
db_result <- dbscan(synthetic_data, eps = 0.5, minPts = 5)
# Tính Silhouette (chỉ cho các điểm không phải nhiễu)
non_noise <- which(db_result$cluster > 0)
if (length(unique(db_result$cluster[non_noise])) > 1) {
sil <- silhouette(db_result$cluster[non_noise],
dist(synthetic_data[non_noise, ]))
# Vẽ biểu đồ Silhouette
plot(sil, main = "Silhouette plot cho DBSCAN",
col = unique(db_result$cluster[non_noise]))
# Tính điểm Silhouette trung bình
avg_sil <- mean(sil[, 3])
cat("Điểm Silhouette trung bình:", avg_sil, "\n")
} else {
cat("Không thể tính Silhouette: chỉ tìm thấy 1 cụm (không tính nhiễu)\n")
}
# Trực quan hóa kết quả DBSCAN
fviz_cluster(list(data = synthetic_data, cluster = db_result$cluster),
palette = c("black", "red", "blue"),  # màu đen cho nhiễu
geom = "point",
ellipse = FALSE,
ggtheme = theme_minimal(),
main = "Kết quả phân cụm DBSCAN")
# Áp dụng DBSCAN với chi tiết về loại điểm
db_result_detailed <- dbscan::dbscan(synthetic_data, eps = 0.5, minPts = 5)
# Sử dụng hàm kNNdist để lấy khoảng cách đến điểm thứ minPts gần nhất
knn_dist <- dbscan::kNNdist(synthetic_data, k = 5-1)
# Xác định loại điểm
point_type <- rep("Nhiễu", nrow(synthetic_data))
point_type[db_result_detailed$cluster > 0] <- "Biên"  # Mặc định tất cả điểm trong cụm là biên
# Xác định điểm lõi (core points)
for (i in 1:nrow(synthetic_data)) {
if (db_result_detailed$cluster[i] > 0) {  # Nếu điểm thuộc một cụm
# Tìm các điểm trong vùng epsilon
neighbors <- which(as.matrix(dist(synthetic_data))[i, ] <= 0.5)
if (length(neighbors) >= 5) {  # Nếu có đủ minPts điểm lân cận
point_type[i] <- "Lõi"
}
}
}
# Tạo data frame cho vẽ biểu đồ
result_df <- data.frame(
x = synthetic_data$x,
y = synthetic_data$y,
cluster = factor(db_result_detailed$cluster),
point_type = factor(point_type, levels = c("Lõi", "Biên", "Nhiễu"))
)
# Vẽ biểu đồ với các loại điểm khác nhau
ggplot(result_df, aes(x = x, y = y, color = point_type, shape = point_type)) +
geom_point(size = 3, alpha = 0.7) +
scale_color_manual(values = c("Lõi" = "red", "Biên" = "blue", "Nhiễu" = "black")) +
scale_shape_manual(values = c("Lõi" = 16, "Biên" = 17, "Nhiễu" = 4)) +
theme_minimal() +
labs(title = "Phân tích điểm lõi, điểm biên và điểm nhiễu trong DBSCAN",
color = "Loại điểm", shape = "Loại điểm") +
theme(legend.position = "bottom")
