a1 <- 12
a2 = 10
a3 <- a1+a2
a3
2+2
v1 = 1
v2 <-1
vector1 <- c(1,2,3)
vector2 <- c(1:10)
help(c)
help(rep)
a <- 1.5
class(a)
b <- 10
class(b)
is.integer(b)
is.numeric(b)
as.integer(a)
class(a)
a <- as.integer(a)
class(a)
is.integer(a)
is.numeric(a)
class(b)
b <- 6.89
class(b)
b <- as.integer(b)
b
a <- 5; b<-3; c<-1
a + b + c
a + b
b + c
z = a < b
z
class(z)
a <- TRUE
b <- FALSE
a & a
a & b
a | b
!a
!b
x <- (5<9) & (6>=5)
x
a <- "z"
b <- "Le Nhat Tung"
class(a)
class(b)
c <- "9.66"
c
is.numeric(c)
d <- as.numeric(c)
d
d <- as.numeric("9. sau sau")
d
d <- as.numeric("9.66  ")
d
date1 <- "2030-01-15"
class(date1)
as.numeric(date1)
date2 <- as.Date(date1)
class(date2)
date2 <- as.Date(date1)
class(date2)
as.numeric(date2)
date3 <- as.Date("2004-02-28")
as.numeric(date3)
dateThanh <- as.Date("2004-02-28") #Thanh
as.numeric(dateThanh)
dateQAnh <- as.Date("2004-01-01") # QANH
dateQAnh - dateThanh
dates2 <- c("11/20/80", "11/20/91", "11/20/1993", "09/10/93")
dates2.D <- as.Date(dates2)
# Error in charToDate(x) :
#   character string is not in a standard unambiguous format
dates2.D <- as.Date(dates2, format = "%m/%d/%y")
dates2.D
time1 <- as.POSIXct("2025-02-16 10:15:00")
time1
time2 <- as.POSIXct("2024-02-16 14:30:00", tz="Asia/Ho_Chi_Minh")
time2
# Chuyển đổi với định dạng tùy chỉnh
time3 <- as.POSIXct("16/02/2024 14:30:00",
format="%d/%m/%Y %H:%M:%S")
time3
# Lấy ra ngày của hệ thống
today <- Sys.Date()
today
todayFormatted <- format(today, format="%A %d %B %Y")
todayFormatted
# Sử dụng c()
v1 <- c(1,2,3,4,5)
v2 <- c("A", "B", "C", "D", "E")
class(v2)
v_mix <- c(1, "A", 2, "B", 3, "C")
class(v_mix)
# Lưu ý:
#
# Vector luôn chứa các phần tử cùng kiểu
# Nếu trộn các kiểu, R sẽ chuyển đổi tất cả về cùng một kiểu
# Thường là chuyển về kiểu dữ liệu "mạnh" nhất:
#
#   logical < integer < numeric < character
v_mix <- c(TRUE, 1, "A", 2, "B", 3, "C")
class(v_mix)
# Su dung : de tu dong tao
v3 <- c(1:10)
v3
class(v3)
v4 <- c(1.5:3.5)
v4
v6 <- c(TRUE, FALSE, T, F)
v6
# Su dung rep
v7 <- rep(1, times = 10)
v7
v8 <- rep(c(1,2), times=3)
v8
v9 <- rep(c(1,2), each=3)
v9
v10 <- rep(c(1,2), times=3, each=3)
v10
# Tao day so seq() - Sequence
s1 <- seq(1, 5)
s1
s2 <- seq(from=10, to=20)
s2
s3 <- sed(1, 10, by =2)
s3 <- seq(1, 10, by =2)
s3
s4 <- seq(5, 1, by=-1)
s4
dates <- seq(today, as.Date("2030-12-31"), by="day")
dates
# Về các phép toán với vector trong R
x <- c(1:4) # 1 2 3 4
y <- seq(2,8, by =2) # 2 4 6 8
# Cộng
x+y
# Về các phép toán với vector trong R
x <- c(1:5) # 1 2 3 4
y <- seq(2,8, by =2) # 2 4 6 8
# Cộng
x+y
# Trừ
x-y
# Về các phép toán với vector trong R
x <- c(1:4) # 1 2 3 4
y <- seq(2,8, by =2) # 2 4 6 8
# Nhân
x*y
# Chia
x/y
# Lũy thừa
x^2
x <- seq("A", "Z")
x <- seq(1, 20)
x
x[1]
x[20]
y <- seq(0, 10)
y[1]
y
y[5]
y[-2]
y[-2]
index <- c(3,5,7)
y[index]
index2 <- c(3:5)
index2 <- c(3:5)
y[index2]
y[7:8]
y[-2:3]
y[3:-2]
y[3:2]
y[8:2]
vectorNamed <- c("Tung", "Le", "18 years old")
names(vectorNamed) <- c("name", "surname", "age")
vectorNamed["age"]
vectorNamed["surname"]
vectorNamed[c("surname", "age")]
# Tạo số thập phân
num <- 23.67
print(num)
class(num)
# Chuyển sang số nguyên
num_int <- as.integer(num)
class(num_int)
text1 <- "Hello"
text2 <- "Le Nhat Tung"
help(paste)
help(paste0)
result1 <- paste(text1, text2)
result1
result2 <- paste(text1, text2, sep = "-")
result2
result3 <- paste("a", "b", "c", sep='->')
result3
result4 <- paste0(text1, text2)
result4
vectors_s <- c("a", "b", "c")
result5 <- paste(vectors_s)
result5
result5 <- paste(vectors_s, collapse = ", ")
result5
result6 <- paste(c("x", "y"), c("1", "2"), sep = "-", collapse = ";")
result6
result6 <- paste(c("x", "y"), c("1", "2", "3"), sep = "-", collapse = ";")
result6
result6 <- paste(c("x", "y"), c("1", "2", "3", "4"), sep = "-", collapse = ";")
result6
result7 <- paste(c("x", "y"), c("1", "2", "3", "4"), sep = "-", collapse = ";", recycle0 = FALSE)
result7
result7 <- paste(c("x", "y"), c("1", "2", "3", "4"), recycle0 = FALSE)
result7
result7 <- paste(c(), c("1", "2", "3", "4"), recycle0 = FALSE)
result7
result7 <- paste(c(), c("1", "2", "3", "4"), recycle0 = TRUE)
result7
result7 <- paste(c(), c("1", "2", "3", "4"), recycle0 = TRUE)
result7
result7 <- paste(c(), c("1", "2", "3", "4"), recycle0 = FALSE)
result7
# 3. Bài tập về xử lý ngày tháng:
# Cho vector vecDate <- c("09:12:12", "28:02:16", "31:05:22").
# Hãy:
# a) Chuyển đổi vector này sang kiểu Date
# b) Tính số ngày giữa các ngày trong vector với ngày hiện tại.
vecDate <- c("09:12:12", "28:02:16", "31:05:22")
class(vecDate)
# 3. Bài tập về xử lý ngày tháng:
# Cho vector vecDate <- c("09:12:12", "28:02:16", "31:05:22").
# Hãy:
# a) Chuyển đổi vector này sang kiểu Date
# b) Tính số ngày giữa các ngày trong vector với ngày hiện tại.
vecDate <- c("09:12:12", "28:02:16", "31:05:22")
class(vecDate)
dates <- as.Date(vecDate, format="%d:%m:%y");
print(dates)
vec1 <- c(2:8, 17:30)
vec1
vec2 <- seq(from=2, to=32, by=6)
vec2
# 6. Bài tập lặp chuỗi:
# Tạo một vector có cấu trúc: "2", "7", "a", "2", "7", "a",
# "2", "7", "a" bằng cách sử dụng hàm rep().
result <- rep(c("2", "7", "a"), times=3)
result
# 7. Bài tập về số chia hết:
# Tạo một vector độ dài 100 chứa các số liên tiếp chia hết cho 3.
vec3 <- seq(from=3, by=3, length.out=100)
vec3
seq(from=1, to=9, by=2)
rep(seq(from=1, to=9, by=2), each=2)
# 8. Bài tập tạo mẫu phức tạp:
# Sử dụng một dòng code duy nhất để tạo vector "vec3" có cấu trúc:
#   (1, 1, 3, 3, 5, 5, 7, 7, 9, 9) lặp lại 3 lần.
rep(seq(from=1, to=9, by=2), each=2, times=3)
# runif() tạo số ngẫu nhiên phân phối đều
vec4 <- runif(50)
vec
vec4
vec4 <- (vec4*21)
vec4
vec4 <- floor(vec4)
vec4
# 10. Bài tập truy xuất phần tử:
# In ra các giá trị của phần tử thứ 5, 10 và 26 từ vector
# vừa tạo ở câu 9.
vec4[5]
vec4[c(5,10,26)]
# 11. Bài tập về dãy có quy luật:
# In ra giá trị của các phần tử cách đều nhau trong vector từ câu 9,
# bắt đầu từ phần tử thứ 5 và lấy cứ mỗi phần tử thứ hai.
# Gợi ý: Sử dụng hàm seq().
indices <- seq(from=5, to=length(vec4), by=2)
result <- vec4[indices]
result
# Ví dụ:
# Dữ liệu giáo dục
education <- factor( c("High School", "Bachelor", "Master", "PhD"),
levels = c("High School", "Bachelor", "Master", "PhD"),
ordered = TRUE)
str(education)
levels(education)
le
# Tạo dữ liệu điểm số của học sinh
grades <- factor(
c("Giỏi", "Khá", "Trung bình", "Giỏi", "Khá", "Yếu"),
levels = c("Yếu", "Trung bình", "Khá", "Giỏi"),
ordered = TRUE  # Có thứ tự từ yếu đến giỏi
)
table(grades)
table(satisfaction)
# Khảo sát khách hàng
satisfaction <- factor(
c("Rất thích", "Thích", "Bình thường", "Không thích",
"Thích", "Rất thích", "Bình thường"),
levels = c("Không thích", "Bình thường", "Thích", "Rất thích"),
ordered = TRUE
)
table(satisfaction)
# Vẽ biểu đồ
barplot(table(satisfaction))
# Kích cỡ áo
sizes <- factor(
c("M", "L", "S", "XL", "M", "S", "M", "L", "XL", "M"),
levels = c("S", "M", "L", "XL"),
ordered = TRUE
)
# Thống kê số lượng mỗi size
summary(sizes)
mat1 <- matrix(1:6, nrow = 2, ncol = 3)
mat1
# Cách 2: chỉ định cách điền (byrow)
mat2 <- matrix(1:6, ncol=3, byrow = TRUE)
mat2
# Tạo matrix rỗng:
empty_mat <- matrix(NA, nrow = 3, ncol = 5)
empty_mat
# Tạo matrix 0:
zero_mat <- matrix(0, nrow = 3, ncol = 3)
zero_mat
# Bảng điểm
grades <-matrix(
c(
8.5, 9, 7.5, 8.8,
9.2, 7.8, 8.5, 9.0,
7.6, 8.2, 8.9, 8.5
),
nrow = 3,
ncol = 4,
byrow = TRUE
)
matrix
grades
rownames(grades) <- c("Le Nhat Tung", "Nguyen Van A", "Le Thi C")
grades
colnames(grades) <- c("Toán", "Văn", "Anh", "Tin")
grades
sales <- matrix(
c(150, 200, 180,
120, 160, 140,
180, 220, 200),
nrow = 3,
ncol = 3,
byrow = TRUE,
dimnames = list(
c("SP1", "SP2", "SP3"),
c("T1", "T2", "T3")
)
)
sales
# Một phần tử tại vị trí hàng 1, cột 2
sales[1,2]
# Một phần tử tại vị trí hàng 1, cột 2
sales[1,2]
# Một hàng, một cột
sales[1,]
sales[,1]
# Nhiều hàng, nhiều cột
sales[1:2, ]
sales[, 2:3]
# Dựa trên tên của cột, hàng
sales[, "T1"]
sales[c("SP1", "SP3"), ]
# Tính toán
rowSums(sales)
colSums(sales)
barplot(colSums(sales))
rowMeans(sales)
colMeans(sales)
Dữ liệu bán hàng theo tháng
# Dữ liệu bán hàng theo tháng
sales <- matrix(
c(150, 200, 180,
120, 160, 140,
180, 220, 200),
nrow = 3,
ncol = 3,
byrow = TRUE,
dimnames = list(
c("SP1", "SP2", "SP3"),
c("T1", "T2", "T3")
)
)
student[1]
# Tạo một list đơn giản
student <- list(
name = 'Tung',
age = 18,
grades = c(8.5, 9.0, 7.5),
passed = TRUE
)
student[1]
class(student[1])
# Cách 2: Dùng [[ ]] - trả về nội dung
student[[1]]
class(student[[1]])
# Cách 3: Dùng $ - truy cập theo tên
student$grades
# Thêm giá trị mới
student$id <- '012345678'
print(student)
# Cập nhật giá trị
student$grades <- c(10, 10, 10)
student
# Tạo một list đơn giản
student <- list(
name = 'Tung',
age = 18,
grades = c(8.5, 9.0, 7.5),
passed = TRUE
)
student[[3]][1,3]
student[[3]]
student[[3]][1]
student[[3]][c(1,3)]
v <- c("a", "b", "c", "c", "b", "a", "b")
v_factor <- factor(v,
levels = c("a", "b", "c"),
labels = c("Letter A", "Letter B", "Letter C")
)
summary(v_factor)
str(v_factor)
x <- sample(1:4, 10, replace = TRUE)
print(x)
class(x)
summary(x)
x_factor <- factor(x,
levels = c(1:4),
labels = c("low", "medium", "high", "very high"),
ordered = TRUE
)
summary(x_factor)
table <- matrix(0, nrow=5, ncol=2)
table
table[,1] <- 3
table
table[3,2] <- 20
table
print("Giá trị cột 2:")
print(table[,2])
class(table[,2])
table[4,2] <- "twelve"
table
class(table[,2])
class(table[,1])
# Taoh các biên khác nhau
vec1 <- c("a", "b", "c")
vec1
mat1 <-matrix(1:6, nrow=2)
mat1
single_val <-100
vec2 <- c(1,2,3)
# Tạo list
myList <- list(vec1, mat1, single_val, vec2)
myList
# a
myList[[1]]<-cbind(myList[[1]], c("d"))
myList
# a
myList[[1]]<-c(myList[[1]], c("d"))
myList
# Tạo list
myList <- list(vec1, mat1, single_val, vec2)
# a
myList[[1]]<-c(myList[[1]], c("d"))
myList
# Tạo list
myList <- list(vec1, mat1, single_val, vec2)
# a
myList[[1]]<-c(myList[[1]], c("d"))
#b
length(list)
#b
length(myList)
myList[[length(myList)+1]] <- c(5,6,7,8,9)
myList[[length(myList)]][4]
#d
myList[[length(myList)]][5] <-NA
myList
