text(2002, 76.5, labels = c("Poland in EU"))
arrows(2002, 76, 2004, 75, col = "green", lwd=3)
# Them diem danh dau gia tri cau nhat
points(x=year_max_le, y=max_le_germany, pch=19, col="red")
# 2.16 Thay đổi hướng nhãn trục
# R có nhiều cách để chỉ định màu sắc:
# Tên màu: R có hơn 600 tên màu được xác định sẵn (ví dụ: “red”, “blue”, “darkgreen”)
# Mã hex: Dạng “#RRGGBB” (ví dụ: “#FF0000” cho màu đỏ)
# Hàm RGB: rgb(red, green, blue, alpha) với các giá trị từ 0 đến 1
?rgb
barplot(rep(1,5),
col=c("red", "blue", "#00FF00", rgb(1,0,1), "darkblue"),
names.arg = c("red", "blue", "#00FF00", rgb(1,0,1), "darkblue"),
main = "Các cách chỉ định màu sắc trong R"
)
hist(USArrests$Murder, main = "Phân phối số vụ giết người ở Mỹ",
xlab = "Số vụ giết người / 100,000 dân",
col = "lightblue",
border = "darkblue"
)
# b) Sử dụng bảng màu Zissou1 từ gói wesanderson để tạo một vector gồm 10 màu liên tục
# và áp dụng các màu này cho các cột trong biểu đồ histogram.
# Lưu ý: Bạn có thể giả định rằng gói wesanderson đã được cài đặt và tải khi nộp bài.
library(wesanderson)
library(wesanderson)
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
zissou_colors <- wes_palette("Zissou1", 10, type="continues")
# Vẽ histogram
hist(USArrests$Murder, main = "Phân phối số vụ giết người ở Mỹ",
xlab = "Số vụ giết người / 100,000 dân",
col = zissou_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
zissou_colors <- wes_palette("Zissou1", 10, type="continues")
# Vẽ histogram
hist(USArrests$Murder, main = "Phân phối số vụ giết người ở Mỹ",
xlab = "Số vụ giết người / 100,000 dân",
col = zissou_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
zissou_colors <- wes_palette("Zissou1", 10, type="continuous")
# Vẽ histogram
hist(USArrests$Murder, main = "Phân phối số vụ giết người ở Mỹ",
xlab = "Số vụ giết người / 100,000 dân",
col = zissou_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 4, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 50, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 50, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 6, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 2, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 3, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 4, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
if(require(wesanderson)){
# Tạo một vector 10 màu liên tục
Moonrise1_colors <- wes_palette("Moonrise1", 5, type="discrete")
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
}
par(mfrow=c(1,2))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
# Vẽ histogram
hist(USArrests$Murder, main = "Phân phối số vụ giết người ở Mỹ",
xlab = "Số vụ giết người / 100,000 dân",
col = zissou_colors,
border = "darkblue"
)
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
# d) Thiết lập cửa sổ đồ họa để hiển thị hai cột, một hàng.
par(mfrow=c(1,2))
# e) Vẽ hai biểu đồ histogram cạnh nhau.
# Vẽ histogram
hist(USArrests$Murder, main = "Phân phối số vụ giết người ở Mỹ",
xlab = "Số vụ giết người / 100,000 dân",
col = zissou_colors,
border = "darkblue"
)
# Vẽ histogram
hist(USArrests$Rape, main = "Phân phối số vụ hiếp dâm ở Mỹ",
xlab = "Số vụ hiếp dâm / 100,000 dân",
col = Moonrise1_colors,
border = "darkblue"
)
par(mfrow=c(1,1))
# 2. Biểu đồ boxplot với các tùy chỉnh cho dữ liệu bảo hiểm
# a) Đọc tệp insurance.csv (từ thư mục chi phí y tế) vào R và lưu vào biến insurance.
# Kiểm tra dữ liệu đã được tải đúng chưa và kiểu dữ liệu của các biến có phù hợp không.
# Chuyển đổi các biến sex (giới tính), smoker (người hút thuốc) và region (khu vực) sang kiểu factor.
setwd("D:/R-Intro/R-Intro/data/graphics - medical cost personal dataset")
insurance <- read.csv("")
insurance <- read.csv("insurance.csv")
str(insurance)
insurance$sex <- factor(insurance$sex)
insurance$smoker <- factor(insurance$smoker)
insurance$region <- factor(insurance$region)
# Kiểm tra dữ liệu
str(insurance)
boxplot(
charges ~ region,
data = insurance,
xlab="Region",
ylab="Medical charges"
)
boxplot(
charges ~ region,
data = insurance,
xlab="Region",
ylab="Medical charges"
)
if(require(viridis)){
# Tạo 4 màu từ bảng viridis
region_colors <- viridis(4, option = "D")
boxplot(
charges ~ region,
data = insurance,
xlab="Region",
ylab="Medical charges",
col = region_colors
)
}
legend("topright",
legend=levels(insurance$region),
fill= region_colors,
title = "Region")
?rgb
?min
# Example
max(iris$Sepal.Length)
min(iris$Sepal.Length)
max(iris$Sepal.Length) - min(iris$Sepal.Length)
max(iris$Sepal.Width) - min(iris$Sepal.Width)
max(iris$Sepal.Length) - min(iris$Sepal.Length)
max(iris$Sepal.Width) - min(iris$Sepal.Width)
max(iris$Petal.Length) - min(iris$Petal.Length)
max(iris$Petal.Width) - min(iris$Petal.Width)
myRange <- function(variable){
rangeValue <- max(variable) - min(variable);
return(rangeValue);
}
# Su dung ham
myRange(iris$Sepal.Length)
myRange <- function(variable, missingRemove = TRUE){
rangeValue <- max(variable, na.rm=missingRemove) - min(variable, na.rm= missingRemove);
return(rangeValue);
}
newV <- c(seq(1,20,4), NA)
newV
myRange(newV)
myRange(newV, false)
myRange(newV, F)
?rgb
?min
# Các hàm cho phép bạn thêm các tính năng mới vào R
# phù hợp nhất với nhu cầu của bạn. Chúng là các khối
# mã có thể tái sử dụng và có thể được gọi nhiều lần
# trong toàn bộ tập lệnh của bạn.
# Function template
myFunction <- function(arguments){
# Phần thân của hàm
# ....
return (result);
}
# Example
max(iris$Sepal.Length)
min(iris$Sepal.Length)
# Manually calculating ranges
max(iris$Sepal.Length) - min(iris$Sepal.Length)
max(iris$Sepal.Width) - min(iris$Sepal.Width)
max(iris$Petal.Length) - min(iris$Petal.Length)
max(iris$Petal.Width) - min(iris$Petal.Width)
# Xay dung function
myRange <- function(variable){
rangeValue <- max(variable) - min(variable);
return(rangeValue);
}
# Su dung ham
myRange(iris$Sepal.Length)
# Bo sung them dieu khien
myRange2 <- function(variable, missingRemove = TRUE){
rangeValue <- max(variable, na.rm=missingRemove) - min(variable, na.rm= missingRemove);
return(rangeValue);
}
newV <- c(seq(1,20,4), NA)
newV
myRange2(newV)
myRange2(newV, F)
myRange(newV)
myRange2(newV)
myRange2(newV, F)
myRange2(newV, T)
tryCatch(
{
myRange(v)
},
error = function(e){
print("Error: Khong the tinh khoang gia tri cho du lieu bi thieu");
}
)
lapply(iris[,1:4], myRange);
logicalVector <- c(T, F, T, T, F)
counter=0;
for (v in vector) {
if(v==T){
counter <-counter+1;
}
}
for (v in logicalVector) {
if(v==T){
counter <-counter+1;
}
}
counter
counter<-0;
for (v in logicalVector) {
if(v==T){
counter <-counter+1;
}
}
counter
counter<-0;
for (i in 1:length(logicalVector)){
if(logicalVector[i]==T){
counter <- counter+1;
}
}
counter;
counter
x <- 100
if(x//2==0){
x <- 100
if(x%%2==0){
print(x, " là số chẵn");
}else{
print(x, " là số lẻ")
}
x <- 100
if((x%%2)==0){
print(x, " là số chẵn");
}else{
print(x, " là số lẻ")
}
x <- 100
if((x%%2)==0){
print(x, " là số chẵn");
}else{
print(x, " là số lẻ")
}
x <- 100
if((x%%2)==0){
print(paste(x, " là số chẵn"));
}else{
print(paste(x, " là số lẻ"));
}
x <- 100
if((x%%2)==0){
print(paste(x, " la so chan"));
}else{
print(paste(x, " la so le"));
}
x <- 101
if((x%%2)==0){
print(paste(x, " la so chan"));
}else{
print(paste(x, " la so le"));
}
# thay doi ngon ngu sang English
Sys.setlocale("LC_ALL", "English")
Sys.setenv(LANGUAGE="en")
setwd("D:/R-Intro/R-Intro/data/graphics - water quality/water_portability.csv")
water <- read.csv("water_portability.csv")
View(water)
water <- read.csv("water_portability.csv")
View(water)
setwd("D:/R-Intro/R-Intro/data/graphics - water quality/")
water <- read.csv("water_portability.csv")
View(water)
setwd("D:/R-Intro/R-Intro/data/graphics - water quality")
water <- read.csv("water_portability.csv")
water <- read.csv("water_potability.csv")
View(water)
str(wate)
str(water)
longley
# Xay dung linear regression model
summary(longley)
str(longley)
#Ma tran tuong quan giua cac bien
cor(longley)
cor(longley$GNP, longley$Employed)
# Xay model
model <- lm(GNP~Employed, data=longley)
model
summary(model)
summary(model)
model$coefficients
model$coefficients[[1]]
model$coefficients[[2]]
model$model
# Xay model 2 bien
model1 <- lm(GNP~Employed+Armed.Forces, data=longley)
summary(model1)
model$coefficients
model$coefficients[[1]]
model$coefficients[[2]]
model1$coefficients
model1$coefficients[[1]]
model1$coefficients[[2]]
#=====================
boston
#=====================
data(Boston)
#=====================
library(MASS)
data(Boston)
str(Boston)
summary(Boston)
# Ve ma tran tuong quan
pairs(Boston)
# Tính ma trận tương quan
correlation<-cor(Boston)
# Tính ma trận tương quan
correlation<-cor(Boston)
print(correlation["medv", ])
# plot bieu do phan tan giua so phong trung va gia nha
plot(Boston$rm, Boston$medv,
xlab="So phong trung binh (rm)",
ylab="Gia nha trung binh medv",
main="Moi quan he giua rm va nedv",
abline(lm(medv~rm, data=Boston), col="red"))
# Cài đặt và tải các gói cần thiết
if (!require(MASS)) install.packages("MASS")
if (!require(caret)) install.packages("caret")
library(MASS)      # Chứa bộ dữ liệu Boston
library(caret)     # Chia dữ liệu và đánh giá mô hình
# Bước 1: Tải dữ liệu Boston housing
data(Boston)
X <- Boston[, 1:13]  # Tất cả các biến trừ biến mục tiêu
y <- Boston$medv     # Biến mục tiêu là giá nhà trung bình
dataset_name <- "Boston housing"
# Bước 2: Khám phá dữ liệu
cat("Thông tin về tập dữ liệu", dataset_name, ":\n")
cat("Số mẫu:", nrow(X), "\n")
cat("Số đặc trưng:", ncol(X), "\n\n")
cat("Năm hàng đầu tiên của dữ liệu:\n")
print(head(X))
# Hiển thị thống kê mô tả
cat("\nThống kê mô tả về dữ liệu:\n")
print(summary(X))
# Bước 3: Phân chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(42)  # Đặt seed cho khả năng tái tạo
# Bước 3: Phân chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(42)  # Đặt seed cho khả năng tái tạo
train_indices <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[train_indices, ]
X_test <- X[-train_indices, ]
y_train <- y[train_indices]
y_test <- y[-train_indices]
cat("\nKích thước tập huấn luyện:", dim(X_train), "\n")
cat("Kích thước tập kiểm tra:", dim(X_test), "\n")
# Bước 4-5: Xây dựng và huấn luyện mô hình hồi quy tuyến tính
model <- lm(y_train ~ ., data = X_train) # Dau . la lay tat ca
# Bước 6: Kiểm tra hệ số hồi quy
coef_df <- data.frame(
feature = names(coef(model)[-1]),
coefficient = coef(model)[-1]
)
coef_df <- coef_df[order(coef_df$coefficient, decreasing = TRUE), ]
summary(model)
cat("\nHệ số hồi quy:\n")
print(coef_df)
cat("Hệ số chặn (Intercept):", coef(model)[1], "\n")
# Bước 7: Dự đoán trên tập kiểm tra
y_pred <- predict(model, newdata = X_test)
# Bước 8: Đánh giá mô hình
mse <- mean((y_test - y_pred)^2)
mse
rmse <- sqrt(mse)
rmse
r2 <- 1 - sum((y_test - y_pred)^2) / sum((y_test - mean(y_test))^2)
cat("\nĐánh giá mô hình:\n")
cat("Mean Squared Error (MSE):", round(mse, 4), "\n")
cat("Root Mean Squared Error (RMSE):", round(rmse, 4), "\n")
cat("R-squared (R²):", round(r2, 4), "\n")
# Bước 9: Trực quan hóa kết quả
# So sánh giá trị thực tế và dự đoán
plot(y_test, y_pred,
main = "So sánh giữa giá trị thực tế và dự đoán",
xlab = "Giá trị thực tế",
ylab = "Giá trị dự đoán",
pch = 16,
col = "blue")
# Bước 9: Trực quan hóa kết quả
# So sánh giá trị thực tế và dự đoán
plot(y_test, y_pred,
main = "So sánh giữa giá trị thực tế và dự đoán",
xlab = "Giá trị thực tế",
ylab = "Giá trị dự đoán",
pch = 16,
col = "blue")
abline(0, 1, col = "red", lwd = 2, lty = 2)  # Đường thẳng y=x
grid()
# Bước 10: Phân tích dư (residuals)
residuals <- y_test - y_pred
plot(y_pred, residuals,
main = "Biểu đồ phân tích dư",
xlab = "Giá trị dự đoán",
ylab = "Dư (Residuals)",
pch = 16,
col = "green")
abline(h = 0, col = "red", lwd = 2, lty = 2)  # Đường ngang y=0
grid()
# Bước 11: Trực quan hóa phân phối dư
hist(residuals,
breaks = 20,
main = "Phân phối của dư",
xlab = "Dư (Residuals)",
ylab = "Tần số",
col = "skyblue",
border = "black")
grid()
# Bước 9: Trực quan hóa kết quả
# So sánh giá trị thực tế và dự đoán
plot(y_test, y_pred,
main = "So sánh giữa giá trị thực tế và dự đoán",
xlab = "Giá trị thực tế",
ylab = "Giá trị dự đoán",
pch = 16,
col = "blue")
abline(0, 1, col = "red", lwd = 2, lty = 2)  # Đường thẳng y=x
grid()
